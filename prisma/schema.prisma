generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  email                String             @unique @map("email")
  password             String             @map("password")
  cpf                  String             @unique @map("cpf")
  is_active            Boolean            @default(true) @map("is_active")
  created_at           DateTime           @default(now()) @map("created_at")
  updated_at           DateTime           @updatedAt @map("updated_at")
  role                 UserRole           @default(PATIENT) @map("role")
  allowed              Json               @default("{}") @map("allowed")
  id                   String             @id @default(uuid()) @map("id") @db.Uuid
  city_id              String?            @map("city_id") @db.Uuid
  health_unit_id       String?            @map("health_unit_id") @db.Uuid
  doctor_consultations consultation[]     @relation("DoctorConsultations")
  uploaded_documents   document[]         @relation("UploaderDocuments")
  doctor_exams         exam[]             @relation("DoctorExams")
  doctor_schedules     medical_schedule[] @relation("DoctorSchedules")
  substitute_schedules medical_schedule[] @relation("SubstituteDoctorSchedules")
  doctor_medications   medication[]       @relation("DoctorMedications")
  uploaded_files       medical_file[]     @relation("UserFiles")
  profile              profile?
}

model profile {
  created_at        DateTime          @default(now()) @map("created_at")
  updated_at        DateTime          @updatedAt @map("updated_at")
  avatar_url        String?           @map("avatar_url")
  birth_date        DateTime?         @map("birth_date")
  document_type     String?           @map("document_type")
  gender            String?           @map("gender")
  name              String            @map("name")
  sus_card          String?           @map("sus_card")
  id                String            @id @default(uuid()) @map("id") @db.Uuid
  user_id           String            @unique @map("user_id") @db.Uuid
  patient_records   medical_record[]  @relation("PatientMedicalRecords")
  user              user              @relation(fields: [user_id], references: [id])
  profile_addresses profile_address[]
  profile_doctor    profile_doctor?
  profile_emails    profile_email[]
  profile_phones    profile_phone[]
}

model profile_phone {
  is_primary Boolean  @default(false) @map("is_primary")
  created_at DateTime @default(now()) @map("created_at")
  phone      String   @map("phone")
  phone_type String   @map("phone_type")
  updated_at DateTime @updatedAt @map("updated_at")
  id         String   @id @default(uuid()) @map("id") @db.Uuid
  profile_id String   @map("profile_id") @db.Uuid
  profile    profile  @relation(fields: [profile_id], references: [id])
}

model profile_email {
  email      String   @map("email")
  is_primary Boolean  @default(false) @map("is_primary")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")
  id         String   @id @default(uuid()) @map("id") @db.Uuid
  profile_id String   @map("profile_id") @db.Uuid
  profile    profile  @relation(fields: [profile_id], references: [id])
}

model profile_address {
  complement   String?  @map("complement")
  city         String   @map("city")
  state        String   @map("state")
  zip_code     String   @map("zip_code")
  is_primary   Boolean  @default(false) @map("is_primary")
  created_at   DateTime @default(now()) @map("created_at")
  address      String   @map("address")
  address_type String   @map("address_type")
  updated_at   DateTime @updatedAt @map("updated_at")
  district     String?  @map("district")
  number       String?  @map("number")
  id           String   @id @default(uuid()) @map("id") @db.Uuid
  profile_id   String   @map("profile_id") @db.Uuid
  profile      profile  @relation(fields: [profile_id], references: [id])
}

model profile_doctor {
  id         String   @id @default(uuid()) @map("id")
  crm_number String   @map("crm_number")
  crm_uf     String   @map("crm_uf")
  created_at DateTime @default(now()) @map("created_at")
  updated_at DateTime @updatedAt @map("updated_at")
  specialty  String   @map("specialty")
  profile_id String   @unique @map("profile_id") @db.Uuid
  profile    profile  @relation(fields: [profile_id], references: [id])
}

model permission {
  name             String            @unique @map("name")
  description      String?           @map("description")
  resource         String?           @map("resource")
  action           String?           @map("action")
  is_active        Boolean           @default(true) @map("is_active")
  created_at       DateTime          @default(now()) @map("created_at")
  updated_at       DateTime          @updatedAt @map("updated_at")
  id               String            @id @default(uuid()) @map("id") @db.Uuid
  role_permissions role_permission[]
}

model role_permission {
  role          UserRole   @map("role")
  created_at    DateTime   @default(now()) @map("created_at")
  id            String     @id @default(uuid()) @map("id") @db.Uuid
  permission_id String     @map("permission_id") @db.Uuid
  permission    permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  
  @@unique([role, permission_id])
}

model city_hall {
  name         String
  cnpj         String
  email        String
  phone        String
  address      String
  city         String
  state        String
  zip_code     String
  active       Boolean       @default(true)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  id           String        @id @default(uuid()) @db.Uuid
  health_units health_unit[]
}

model health_unit {
  id                String             @id @default(uuid()) @map("id") @db.Uuid
  name              String             @map("name")
  address           String             @map("address")
  city              String             @map("city")
  state             String             @map("state")
  zip_code          String             @map("zip_code")
  phone             String?            @map("phone")
  email             String?            @map("email")
  created_at        DateTime           @default(now()) @map("created_at")
  updated_at        DateTime           @updatedAt @map("updated_at")
  city_hall_id      String             @map("city_hall_id") @db.Uuid
  city_hall         city_hall          @relation(fields: [city_hall_id], references: [id])
  medical_records   medical_record[]
  medical_schedules medical_schedule[]

  @@map("health_unit")
}

model medical_record {
  health_unit_id     String         @map("health_unit_id") @db.Uuid
  patient_name       String         @map("patient_name")
  patient_cpf        String?        @map("patient_cpf")
  patient_birth_date String?        @map("patient_birth_date")
  patient_gender     String?        @map("patient_gender")
  patient_phone      String?        @map("patient_phone")
  patient_email      String?        @map("patient_email")
  patient_address    String?        @map("patient_address")
  blood_type         String?        @map("blood_type")
  height             Float?         @map("height")
  weight             Float?         @map("weight")
  allergies          String[]       @default([]) @map("allergies")
  chronic_diseases   String[]       @default([]) @map("chronic_diseases")
  is_active          Boolean        @default(true) @map("is_active")
  created_at         DateTime       @default(now()) @map("created_at")
  updated_at         DateTime       @updatedAt @map("updated_at")
  id                 String         @id @default(uuid()) @map("id") @db.Uuid
  patient_id         String         @map("patient_id") @db.Uuid
  consultations      consultation[]
  documents          document[]
  exams              exam[]
  health_unit        health_unit    @relation(fields: [health_unit_id], references: [id])
  patient            profile        @relation("PatientMedicalRecords", fields: [patient_id], references: [id])
  medications        medication[]
  files              medical_file[] @relation("MedicalRecordFiles")
}

model consultation {
  doctor_name       String             @map("doctor_name")
  specialty         String             @map("specialty")
  date              DateTime           @map("date")
  reason            String?            @map("reason")
  diagnosis         String?            @map("diagnosis")
  prescription      String?            @map("prescription")
  notes             String?            @map("notes")
  follow_up         String?            @map("follow_up")
  status            ConsultationStatus @default(scheduled) @map("status")
  created_at        DateTime           @default(now()) @map("created_at")
  updated_at        DateTime           @updatedAt @map("updated_at")
  id                String             @id @default(uuid()) @map("id") @db.Uuid
  medical_record_id String             @map("medical_record_id") @db.Uuid
  doctor_id         String             @map("doctor_id") @db.Uuid
  doctor            user               @relation("DoctorConsultations", fields: [doctor_id], references: [id])
  medical_record    medical_record     @relation(fields: [medical_record_id], references: [id])
}

model medication {
  name              String           @map("name")
  dosage            String           @map("dosage")
  frequency         String           @map("frequency")
  start_date        DateTime         @map("start_date")
  end_date          DateTime?        @map("end_date")
  doctor_name       String?          @map("doctor_name")
  instructions      String?          @map("instructions")
  active            Boolean          @default(true) @map("active")
  status            MedicationStatus @default(active) @map("status")
  created_at        DateTime         @default(now()) @map("created_at")
  updated_at        DateTime         @updatedAt @map("updated_at")
  id                String           @id @default(uuid()) @map("id") @db.Uuid
  medical_record_id String           @map("medical_record_id") @db.Uuid
  prescribed_by     String?          @map("prescribed_by") @db.Uuid
  medical_record    medical_record   @relation(fields: [medical_record_id], references: [id])
  doctor            user?            @relation("DoctorMedications", fields: [prescribed_by], references: [id])
}

model exam {
  name              String         @map("name")
  type              String?        @map("type")
  date              DateTime       @map("date")
  lab               String?        @map("lab") // ✅ Mantido: campo único para laboratório
  results           String?        @map("results") // ✅ Mantido: campo único para resultados
  doctor_name       String?        @map("doctor_name") // ✅ Mantido: campo único para nome do médico
  file_url          String?        @map("file_url")
  status            ExamStatus     @default(scheduled) @map("status")
  created_at        DateTime       @default(now()) @map("created_at")
  updated_at        DateTime       @updatedAt @map("updated_at")
  id                String         @id @default(uuid()) @map("id") @db.Uuid
  medical_record_id String         @map("medical_record_id") @db.Uuid
  doctor_id         String?        @map("doctor_id") @db.Uuid // ✅ Corrigido: campo único para ID do médico
  medical_record    medical_record @relation(fields: [medical_record_id], references: [id])
  doctor            user?          @relation("DoctorExams", fields: [doctor_id], references: [id]) // ✅ Corrigido: usa doctor_id
}

model document {
  name              String         @map("name")
  type              String?        @map("type")
  date              DateTime       @map("date")
  description       String?        @map("description")
  url               String?        @map("url")
  file_url          String?        @map("file_url")
  size              String?        @map("size")
  added_by          String?        @map("added_by")
  created_at        DateTime       @default(now()) @map("created_at")
  updated_at        DateTime       @updatedAt @map("updated_at")
  id                String         @id @default(uuid()) @map("id") @db.Uuid
  medical_record_id String         @map("medical_record_id") @db.Uuid
  uploaded_by       String?        @map("uploaded_by") @db.Uuid
  medical_record    medical_record @relation(fields: [medical_record_id], references: [id])
  uploader          user?          @relation("UploaderDocuments", fields: [uploaded_by], references: [id])
}

model medical_schedule {
  health_unit_id       String                @map("health_unit_id") @db.Uuid
  start_datetime       DateTime              @map("start_datetime")
  end_datetime         DateTime              @map("end_datetime")
  status               MedicalScheduleStatus @default(pending) @map("status")
  total_slots          Int                   @map("total_slots")
  available_slots      Int                   @map("available_slots")
  is_recurring         Boolean               @default(false) @map("is_recurring")
  recurrence_type      RecurrenceType?       @default(none) @map("recurrence_type")
  recurrence_end_date  DateTime?             @map("recurrence_end_date")
  recurrence_weekdays  String?               @map("recurrence_weekdays")
  notes                String?               @map("notes")
  created_at           DateTime              @default(now()) @map("created_at")
  updated_at           DateTime              @updatedAt @map("updated_at")
  exdates              String[]              @default([]) @map("exdates")
  rrule                String?               @map("rrule")
  timezone             String?               @map("timezone")
  id                   String                @id @default(uuid()) @map("id") @db.Uuid
  doctor_id            String                @map("doctor_id") @db.Uuid
  substitute_doctor_id String?               @map("substitute_doctor_id") @db.Uuid
  doctor               user                  @relation("DoctorSchedules", fields: [doctor_id], references: [id])
  health_unit          health_unit           @relation(fields: [health_unit_id], references: [id])
  substitute_doctor    user?                 @relation("SubstituteDoctorSchedules", fields: [substitute_doctor_id], references: [id])

  @@map("medical_schedule")
}

// Tabela para armazenar arquivos em Base64
model medical_file {
  id                 String       @id @default(uuid()) @map("id") @db.Uuid
  medical_record_id  String       @map("medical_record_id") @db.Uuid
  original_name      String       @map("original_name")
  file_data          String       @map("file_data") // Dados do arquivo em Base64
  file_size          Int          @map("file_size")
  mime_type          String       @map("mime_type")
  description        String?      @map("description")
  uploaded_by        String       @map("uploaded_by") @db.Uuid
  uploaded_at        DateTime     @default(now()) @map("uploaded_at")
  is_active          Boolean      @default(true) @map("is_active")
  
  // Relacionamentos
  medical_record     medical_record @relation("MedicalRecordFiles", fields: [medical_record_id], references: [id])
  uploader           user           @relation("UserFiles", fields: [uploaded_by], references: [id])
  
  @@map("medical_file")
}

enum UserRole {
  MASTER
  ADMIN
  DOCTOR
  PATIENT
}

enum ConsultationStatus {
  scheduled
  completed
  cancelled
}

enum MedicationStatus {
  active
  completed
  discontinued
}

enum ExamStatus {
  scheduled
  pending
  completed
  cancelled
}

enum MedicalScheduleStatus {
  pending
  confirmed
  temporary
  cancelled
}

enum RecurrenceType {
  none
  daily
  weekly
  monthly
}
 