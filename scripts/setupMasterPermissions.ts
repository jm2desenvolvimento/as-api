import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function setupMasterPermissions() {
  try {
    console.log('üîÑ Configurando permiss√µes do usu√°rio MASTER...');
    
    // 1. Criar permiss√µes b√°sicas
    console.log('üìù Criando permiss√µes b√°sicas...');
    
    const permissions = [
      { id: '550e8400-e29b-41d4-a716-446655440030', name: 'user_list', description: 'Listar usu√°rios', resource: 'user', is_active: true },
      { id: '550e8400-e29b-41d4-a716-446655440031', name: 'user_create', description: 'Criar usu√°rios', resource: 'user', is_active: true },
      { id: '550e8400-e29b-41d4-a716-446655440032', name: 'user_edit', description: 'Editar usu√°rios', resource: 'user', is_active: true },
      { id: '550e8400-e29b-41d4-a716-446655440033', name: 'user_delete', description: 'Excluir usu√°rios', resource: 'user', is_active: true },
      { id: '550e8400-e29b-41d4-a716-446655440034', name: 'user_view', description: 'Visualizar usu√°rios', resource: 'user', is_active: true },
      { id: '550e8400-e29b-41d4-a716-446655440035', name: 'permission_create', description: 'Criar permiss√µes', resource: 'permission', is_active: true },
      { id: '550e8400-e29b-41d4-a716-446655440036', name: 'permission_edit', description: 'Editar permiss√µes', resource: 'permission', is_active: true },
      { id: '550e8400-e29b-41d4-a716-446655440037', name: 'permission_delete', description: 'Excluir permiss√µes', resource: 'permission', is_active: true },
      { id: '550e8400-e29b-41d4-a716-446655440038', name: 'permission_view', description: 'Visualizar permiss√µes', resource: 'permission', is_active: true }
    ];

    for (const perm of permissions) {
      await prisma.permission.upsert({
        where: { id: perm.id },
        update: perm,
        create: perm
      });
    }
    
    console.log('‚úÖ Permiss√µes criadas/atualizadas!');
    
    // 2. Vincular permiss√µes ao role MASTER
    console.log('üîó Vinculando permiss√µes ao role MASTER...');
    
    for (const perm of permissions) {
      // Verificar se j√° existe
      const existing = await prisma.role_permission.findFirst({
        where: {
          role: 'MASTER',
          permission_id: perm.id
        }
      });
      
      if (!existing) {
        await prisma.role_permission.create({
          data: {
            id: `550e8400-e29b-41d4-a716-4466554400${perm.id.slice(-2)}`,
            role: 'MASTER',
            permission_id: perm.id
          }
        });
        console.log(`‚úÖ Permiss√£o ${perm.name} vinculada ao MASTER`);
      } else {
        console.log(`‚ÑπÔ∏è Permiss√£o ${perm.name} j√° est√° vinculada ao MASTER`);
      }
    }
    
    console.log('‚úÖ Permiss√µes vinculadas ao role MASTER!');
    
    // 3. Limpar campo allowed do usu√°rio MASTER (n√£o √© mais necess√°rio)
    console.log('üßπ Limpando campo allowed do usu√°rio MASTER...');
    
    const masterUserId = '550e8400-e29b-41d4-a716-446655440010';
    await prisma.user.update({
      where: { id: masterUserId },
      data: { allowed: {} }
    });
    
    console.log('‚úÖ Campo allowed limpo!');
    console.log('üëë Usu√°rio MASTER agora tem permiss√µes via role_permission!');
    
  } catch (error) {
    console.error('‚ùå Erro ao configurar permiss√µes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setupMasterPermissions();
