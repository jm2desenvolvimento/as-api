import { PrismaClient } from '@prisma/client';
import { DEFAULT_ROLE_PERMISSIONS, ALL_PERMISSIONS } from '../src/modules/auth/constants/permissions';

const prisma = new PrismaClient();

async function syncPermissions(): Promise<void> {
  console.log('üîÑ Sincronizando permiss√µes...');
  
  for (const permissionName of ALL_PERMISSIONS) {
    await prisma.permission.upsert({
      where: { name: permissionName },
      update: { 
        description: getPermissionDescription(permissionName),
        is_active: true 
      },
      create: {
        name: permissionName,
        description: getPermissionDescription(permissionName),
        is_active: true,
      },
    });
  }
  
  console.log(`‚úÖ ${ALL_PERMISSIONS.length} permiss√µes sincronizadas`);
}

// Roles agora s√£o enum no Prisma, n√£o precisam ser sincronizados

async function syncRolePermissions(): Promise<void> {
  console.log('üîÑ Sincronizando permiss√µes de roles...');
  
  for (const [roleName, permissions] of Object.entries(DEFAULT_ROLE_PERMISSIONS)) {
    // Limpar permiss√µes existentes para este role
    await prisma.role_permission.deleteMany({ where: { role: roleName as any } });
    
    // Adicionar novas permiss√µes
    for (const permissionName of permissions) {
      const permission = await prisma.permission.findUnique({ 
        where: { name: permissionName } 
      });
      
      if (permission) {
        await prisma.role_permission.create({
          data: {
            role: roleName as any,
            permission_id: permission.id,
          },
        });
      }
    }
    
    console.log(`‚úÖ Role ${roleName}: ${permissions.length} permiss√µes configuradas`);
  }
}

function getPermissionDescription(permission: string): string {
  const descriptions: Record<string, string> = {
    // User permissions
    'user.create': 'Criar usu√°rios',
    'user.read': 'Visualizar usu√°rios',
    'user.update': 'Atualizar usu√°rios',
    'user.delete': 'Deletar usu√°rios',
    'user.list': 'Listar usu√°rios',
    'user.activate': 'Ativar usu√°rios',
    'user.deactivate': 'Desativar usu√°rios',
    
    // Profile permissions
    'profile.create': 'Criar perfis',
    'profile.read': 'Visualizar perfis',
    'profile.update': 'Atualizar perfis',
    'profile.delete': 'Deletar perfis',
    'profile.list': 'Listar perfis',
    
    // Patient permissions
    'patient.create': 'Criar pacientes',
    'patient.read': 'Visualizar pacientes',
    'patient.update': 'Atualizar pacientes',
    'patient.delete': 'Deletar pacientes',
    'patient.list': 'Listar pacientes',
    'patient.medical_history': 'Ver hist√≥rico m√©dico',
    
    // Doctor permissions
    'doctor.create': 'Criar m√©dicos',
    'doctor.read': 'Visualizar m√©dicos',
    'doctor.update': 'Atualizar m√©dicos',
    'doctor.delete': 'Deletar m√©dicos',
    'doctor.list': 'Listar m√©dicos',
    'doctor.schedule': 'Gerenciar agendas',
    
    // Appointment permissions
    'appointment.create': 'Criar agendamentos',
    'appointment.read': 'Visualizar agendamentos',
    'appointment.update': 'Atualizar agendamentos',
    'appointment.delete': 'Deletar agendamentos',
    'appointment.list': 'Listar agendamentos',
    'appointment.confirm': 'Confirmar agendamentos',
    'appointment.cancel': 'Cancelar agendamentos',
    
    // Medical record permissions
    'medical_record.create': 'Criar prontu√°rios',
    'medical_record.read': 'Visualizar prontu√°rios',
    'medical_record.update': 'Atualizar prontu√°rios',
    'medical_record.delete': 'Deletar prontu√°rios',
    'medical_record.list': 'Listar prontu√°rios',
    'medical_record.view_all': 'Ver todos os prontu√°rios',
    
    // Health unit permissions
    'health_unit.create': 'Criar unidades de sa√∫de',
    'health_unit.read': 'Visualizar unidades de sa√∫de',
    'health_unit.update': 'Atualizar unidades de sa√∫de',
    'health_unit.delete': 'Deletar unidades de sa√∫de',
    'health_unit.list': 'Listar unidades de sa√∫de',
    'health_unit.manage': 'Gerenciar unidades de sa√∫de',
    
    // Specialty permissions
    'specialty.create': 'Criar especialidades',
    'specialty.read': 'Visualizar especialidades',
    'specialty.update': 'Atualizar especialidades',
    'specialty.delete': 'Deletar especialidades',
    'specialty.list': 'Listar especialidades',
    
    // City permissions
    'city.create': 'Criar cidades',
    'city.read': 'Visualizar cidades',
    'city.update': 'Atualizar cidades',
    'city.delete': 'Deletar cidades',
    'city.list': 'Listar cidades',
    
    // Cityhall permissions
    'cityhall.create': 'Criar prefeituras',
    'cityhall.read': 'Visualizar prefeituras',
    'cityhall.update': 'Atualizar prefeituras',
    'cityhall.delete': 'Deletar prefeituras',
    'cityhall.list': 'Listar prefeituras',
    
    // Admin permissions
    'admin.dashboard': 'Acessar dashboard admin',
    'admin.reports': 'Gerar relat√≥rios',
    'admin.system_config': 'Configurar sistema',
    'admin.user_management': 'Gerenciar usu√°rios',
    'admin.backup': 'Fazer backup',
    'admin.logs': 'Ver logs do sistema',
    
    // RBAC permissions
    'rbac.manage_permissions': 'Gerenciar permiss√µes',
    'rbac.manage_roles': 'Gerenciar roles',
    'rbac.view_permissions': 'Visualizar permiss√µes',
    
    // System permissions
    'system.maintain': 'Manter sistema',
    'system.monitor': 'Monitorar sistema',
    'system.configure': 'Configurar sistema',
  };
  
  return descriptions[permission] || permission;
}

async function main() {
  try {
    console.log('üöÄ Iniciando sincroniza√ß√£o RBAC...');
    
    await syncPermissions();
    // Roles s√£o agora enum, n√£o precisam sync
    await syncRolePermissions();
    
    console.log('‚úÖ Sincroniza√ß√£o RBAC conclu√≠da com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o RBAC:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

main(); 